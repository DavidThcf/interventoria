#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('testrest:server');
 var http = require('http');
 const socketIO = require('socket.io');

// variable de usuarios
sockets = [];
userList = {};
/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '81');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var server = http.createServer(app);








///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////


/*
secciÃ³n conexion socket
*/
const io = socketIO(server); // inicia el socket en el server
//para persibir los cambios

io.on('connection', (socket) => {
  console.log('usuario conectado =>');
  //envia los cambios
  io.emit('Hello', {
    greeting : 'kelvin'
  });
  //nuevo usuario
  socket.on('newUser', (idUser) => {
    if (idUser in userList){
      console.log('user ya');
    }else{
      socket.nickname = idUser;
      userList[socket.nickname] = socket.id;
      if ([3,6,9,7].indexOf(idUser)>0){
        socket.join('room1');
      }
    }
    console.log("Lista usuario  >>> >> "+ userList);
  });
  
  socket.on('sendSocketNovedad', (data) => {    

    tipo = data.tipo;
    if(data.tipoAct != undefined){

      var arrUsrRoom1 = [3,6,9,7];
      for (var i = 0; i < arrUsrRoom1.length; i++) {
        if(arrUsrRoom1[i] != data.userSend){
          socket1 = userList[arrUsrRoom1[i]];
          if (socket1){
            io.to(socket1).emit('alert', tipo);
          }
        }
      }

      }else{
        userSend = data.userSend;
        socket1 = userList[userSend];
        if (socket1){

          io.to(socket1).emit('alert', tipo);
        }
      }

    });

  //delete users
  socket.on('delUser', (idUser) => {


  });
  
  //desconectar
  socket.on('disconnect', () => {
    console.log('usuario desconectado');
    delete userList[socket.nickname];
    console.log(userList);
  });
});







///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////











/*

 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
